void **resize(int **arr, int old_rows, int old_columns, int new_rows, int new_columns)
{
	int i;

	if(!(new_rows > 0 && new_columns > 0))
	{
		printf("error.");
		exit(0);
	}

	else if(new_rows < old_rows)
	{
		printf("Contracting...\n");

		// first clear delete/free all extra rows
		for(i=new_rows;i<old_rows;++i)
		{
			free(*(arr+i));
		}

		// now resize the array (shell i.e. **arr)
		arr = (int **)malloc(sizeof(int)*new_rows);

		// then resize all of the rows remaining
		if(new_columns != old_columns)
		{
			for(i=0;i<old_rows;++i)
			{
				*(arr + i) = (int *)realloc(*(arr + i), sizeof(int)*new_columns);
			}
		}
	}

	else if(new_rows > old_rows)
	{
		printf("Expanding...\n");

		// first resize all existing rows
		if(new_columns != old_columns)
		{
			for(i=0;i<old_rows;++i)
			{
				*(arr + i) = (int *)realloc(*(arr + i), sizeof(int)*new_columns);
			}
		}

		// now resize array (the "shell")
		arr = (int **)realloc(arr, sizeof(int *)*new_rows);
			

		// generate new rows
		printf("generating new rows.\n");	
		for (i=old_rows; i<new_rows; ++i)
		{
			*(arr + i) = (int *)malloc(sizeof(int)*new_columns);
		}
	}
	
	else
	{
		if(new_columns != old_columns)
		{
			for(i=0; i<new_rows; ++i)	// or old_rows, same thing now in this case
			{
				*(arr + i) = (int *)realloc(*(arr + i), sizeof(int)*new_columns);
			}
		}
	}
	printf("resizing complete.\n");
}

