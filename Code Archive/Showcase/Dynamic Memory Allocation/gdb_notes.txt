source: https://www.tutorialspoint.com/gnu_debugger

STARTING

	when compiling, you have to let the compiler insert symbols into the program that is being made, 
	then these symbols can be used by a program debugger such as gdb or valgrind.

		$ gcc -g my_source_code.c -o program_output_name

	then to run your program through gdb:
		
		$ gdb program_output_name

		or

		$ gdb
		(gdb) r < program_output_name

	then use the below command

SOME IMPORTANT GDB COMMANDS

    (gdb) b main  			Puts a breakpoint at the beginning of the program

    (gdb) b 	 			Puts a breakpoint at the current line

    (gdb) b N  				Puts a breakpoint at line N

    (gdb) b +N  			Puts a breakpoint N lines down from the current line

    (gdb) b fn  			Puts a breakpoint at the beginning of function "fn"

    (gdb) d N  				Deletes breakpoint number N

    (gdb) info break  		list breakpoints

    (gdb) r 	 			Runs the program until a breakpoint or error

    (gdb) c 	 			Continues running the program until the next breakpoint or error

    (gdb) f 	 			Runs until the current function is finished

    (gdb) s 	 			Runs the next line of the program

    (gdb) s N  				Runs the next N lines of the program

    (gdb) n  				Like s, but it does not step into functions

    (gdb) u N 			 	Runs until you get N lines in front of the current line

    (gdb) p var 	 		Prints the current value of the variable "var"

    (gdb) bt  				Prints a stack trace

    (gdb) u 				Goes up a level in the stack

    (gdb) d 				Goes down a level in the stack

    (gdb) q 	 			Quits gdb



STEPPING THROUGH CODE EXECUTION

	(gdb) l
	this will list the next 10 lines of your source code

	(gdb) l 50
	this will list 10 lines from a specific line of code (in this example, line 50)

	(gdb) l foo
	this will list out a function (in this example, foo())

	(gdb) next
	this will execute the next line of code then pause. If that line was a function call. It will execute the whole function.
	good for speed.

	(gdb) step
	this will run the next instruction (not line) then pause. If that instruction was a function call, then it will enter the
	control of the function then pause after executing the first instruction of that function.

	(gdb) finish
	this will finish executing a function that you stepped into then pause.


BREAKPOINTS AND WATCHPOINTS

	When we set breakpoints and watchpoints, we can choose where to pause the execution of our program and then we can examine 
	and/or change certian variables before continuing to the next breakpoint or error.

	(gdb) break 50
	set a breakpoint at line (in this example, line 50)

	(gdb) foo
	set a breakpoint at the start of a function (in this example, foo())

	(gdb) watch x == 3
	set a watchpoint for when (x == 3) changes. Watchpoints will follow a condition until it changes and then pause the program 
	at that point.

	(gdb) delete N
	delete breakpoint number N.


TRACKING AND MODIFYING VARIABLES

	(gdb) print x
	print the current value of variable x in the program. Being able to use the original variable names is why the (-g) flag is needed;	
	programs compiled regularly have this information removed.

	(gdb) set x = 3
	set variable x to 3.

	(gdb) call myfunction()

	(gdb) call myotherfunction(x)

	(gdb) display x
	Constantly displays the value of variable x, which is shown after every step or pause. Useful if you are constantly checking for 
	a certain value.

	(gdb) undisplay x


MISCELLANEOUS

	(gdb) where
	after encountering an error, get the details of where.	

	(gdb) info line
	prints some info about the current line you're in

	(gdb) backtrace
	or
	(gdb) bt
	backtrace as the name suggests
